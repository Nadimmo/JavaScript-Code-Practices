// var কে কেন বিদায় দেওয়া হলো? var দিয়ে ভেরিয়েব্ল ডিক্লেয়ার করলে কি কি সমস্যা তৈরি হয়

// স্কোপ সমস্যা: var দ্বারা ডিক্লেয়ার করা ভেরিয়েবলগুলি ফাংশন স্কোপে থাকে, অর্থাৎ যদি আপনি একটি ফাংশনের ভিতরে var ব্যবহার করেন, তবে সেই ভেরিয়েবলটি পুরো ফাংশনের মধ্যে অ্যাক্সেসযোগ্য হবে। এটি কখনও কখনও অপ্রত্যাশিত আচরণ সৃষ্টি করতে পারে।

// হোস্টিং: var দ্বারা ডিক্লেয়ার করা ভেরিয়েবলগুলি হোস্টেড হয়, অর্থাৎ আপনি ভেরিয়েবলটি ডিক্লেয়ার করার আগে সেটির মান ব্যবহার করতে পারেন। এটি কোডের পড়া এবং বোঝার ক্ষেত্রে বিভ্রান্তি সৃষ্টি করতে পারে।

// ডুপ্লিকেট ডিক্লেয়ারেশন: var দিয়ে একই নামের ভেরিয়েবল একাধিকবার ডিক্লেয়ার করা সম্ভব, যা কোডের মধ্যে কনফ্লিক্ট এবং ভুল বোঝাবুঝির সৃষ্টি করতে পারে।

// ব্লক স্কোপের অভাব: var ব্লক স্কোপ সমর্থন করে না, অর্থাৎ যদি আপনি একটি if বা for ব্লকের ভিতরে var ব্যবহার করেন, তবে সেই ভেরিয়েবলটি ব্লকের বাইরে থেকেও অ্যাক্সেসযোগ্য হবে।


// var, let, এবং const JavaScript-এ ভেরিয়েবল ডিক্লেয়ারের জন্য ব্যবহৃত তিনটি কিওয়ার্ড। এগুলোর মধ্যে কিছু গুরুত্বপূর্ণ পার্থক্য রয়েছে:

// 1. স্কোপ (Scope)
// var: ফাংশন স্কোপ। যদি var একটি ফাংশনের ভিতরে ডিক্লেয়ার করা হয়, তবে সেটি সেই ফাংশনের মধ্যে এবং বাইরে উভয় জায়গায় অ্যাক্সেসযোগ্য। ব্লক স্কোপ সমর্থন করে না।

// let: ব্লক স্কোপ। এটি একটি ব্লকের (যেমন if, for, ইত্যাদি) ভিতরে ডিক্লেয়ার করা হলে, সেই ব্লকের বাইরে অ্যাক্সেসযোগ্য নয়।

// const: ব্লক স্কোপ। let এর মতো, এটি একটি ব্লকের ভিতরে ডিক্লেয়ার করা হলে, সেই ব্লকের বাইরে অ্যাক্সেসযোগ্য নয়।

// 2. হোস্টিং (Hoisting)
// var: হোস্টেড হয়, অর্থাৎ ভেরিয়েবলটি ডিক্লেয়ার করার আগে ব্যবহার করা সম্ভব। তবে, এটি undefined মান পায় যতক্ষণ না এটি আসল মানে সেট করা হয়।

// let এবং const: হোস্টেড হয়, কিন্তু "টেম্পোরাল ডেড জোন" (TDZ) থাকে। অর্থাৎ, এগুলি ডিক্লেয়ার করার আগে ব্যবহার করা হলে ত্রুটি ঘটবে।

// 3. পুনঃডিক্লেয়ারেশন (Re-declaration)
// var: একই স্কোপে একাধিকবার ডিক্লেয়ার করা সম্ভব। এটি কোডের মধ্যে বিভ্রান্তি সৃষ্টি করতে পারে।

// let এবং const: একই স্কোপে পুনঃডিক্লেয়ার করা সম্ভব নয়। এটি কোডের নিরাপত্তা এবং পরিষ্কারতা বাড়ায়।

// 4. মান পরিবর্তন (Value Assignment)
// var এবং let: উভয়ই পরিবর্তনশীল (mutable) ভেরিয়েবল ডিক্লেয়ার করতে ব্যবহৃত হয়, অর্থাৎ তাদের মান পরিবর্তন করা সম্ভব।

// const: অপরিবর্তনীয় (immutable) ভেরিয়েবল ডিক্লেয়ার করতে ব্যবহৃত হয়। একবার মান সেট করা হলে, সেটি পরিবর্তন করা সম্ভব নয়। তবে, যদি এটি একটি অবজেক্ট বা অ্যারে হয়, তবে তার ভিতরের মান পরিবর্তন করা সম্ভব।