// ইনহেরিটেন্স কী?

// ইনহেরিটেন্স মানে হলো, একটি "শ্রেণী" (class) বা "অবজেক্ট" (object) অন্য একটি "শ্রেণী" বা "অবজেক্ট"-এর বৈশিষ্ট্য (properties) এবং আচরণ (methods) উত্তরাধিকার সূত্রে পাওয়া। এর মানে হলো, আপনাকে একই কোড বারবার লিখতে হবে না। আপনি একবার একটি সাধারণ বৈশিষ্ট্য তৈরি করলে, অন্যান্য শ্রেণী বা অবজেক্ট সেই বৈশিষ্ট্যগুলো ব্যবহার করতে পারবে।

// জাভাস্ক্রিপ্টে ইনহেরিটেন্স মূলত প্রোটোটাইপ (prototype)-এর মাধ্যমে কাজ করে। প্রতিটি অবজেক্টের একটি অভ্যন্তরীণ বৈশিষ্ট্য থাকে, যাকে প্রোটোটাইপ বলা হয়। এই প্রোটোটাইপ নিজেই একটি অবজেক্ট। যখন আপনি কোনো অবজেক্টের এমন কোনো বৈশিষ্ট্য বা মেথড অ্যাক্সেস করার চেষ্টা করেন যা সেই অবজেক্টের নিজের নেই, তখন জাভাস্ক্রিপ্ট তার প্রোটোটাইপের দিকে তাকায়। যদি সেখানেও না পায়, তবে তার প্রোটোটাইপের প্রোটোটাইপের দিকে তাকায় – এভাবে একটি চেইন তৈরি হয় যতক্ষণ না বৈশিষ্ট্যটি খুঁজে পাওয়া যায় অথবা চেইনের শেষ পর্যন্ত পৌঁছানো যায় 


// জাভাস্ক্রিপ্টে ইনহেরিটেন্সের প্রকারভেদ (প্রধানত):

// প্রোটোটাইপাল ইনহেরিটেন্স (Prototypal Inheritance): এটাই জাভাস্ক্রিপ্টের মূল ইনহেরিটেন্সের পদ্ধতি। এখানে একটি অবজেক্ট সরাসরি অন্য অবজেক্ট থেকে উত্তরাধিকার লাভ করে।

// ক্লাস-ভিত্তিক ইনহেরিটেন্স (Class-based Inheritance): ES6 (ECMAScript 2015)-এ class সিনট্যাক্স যোগ করার পর, জাভাস্ক্রিপ্টে অন্যান্য প্রোগ্রামিং ভাষার মতো ক্লাস-ভিত্তিক ইনহেরিটেন্সের মতো সিনট্যাক্স ব্যবহার করা যায়। তবে ভেতরে এটি প্রোটোটাইপাল ইনহেরিটেন্সের উপরেই তৈরি।

// ইনহেরিটেন্সের সুবিধা:

// কোড রিইউজেবিলিটি (Code Reusability): আপনি একবার কোনো সাধারণ বৈশিষ্ট্য তৈরি করলে, অন্যান্য ক্লাস বা অবজেক্ট সেটি ব্যবহার করতে পারে, ফলে কোড বারবার লেখার প্রয়োজন হয় না।
// সহজে পরিবর্তনযোগ্য (Maintainability): যদি আপনি প্যারেন্ট ক্লাসে কোনো পরিবর্তন করেন, তবে সেই পরিবর্তন চাইল্ড ক্লাসগুলোতেও স্বয়ংক্রিয়ভাবে প্রতিফলিত হয়।
// বর্ধিতকরণযোগ্য (Extensibility): আপনি সহজেই বিদ্যমান ক্লাসের বৈশিষ্ট্যগুলো বাড়িয়ে নতুন ক্লাস তৈরি করতে পারেন।
// পলিমরফিজম (Polymorphism) (ইনহেরিটেন্সের মাধ্যমে অর্জন করা যায়): বিভিন্ন ক্লাসের অবজেক্ট একই মেথডের কলে ভিন্ন ভিন্ন আচরণ করতে পারে।


const person = {
    name: "Nadim Mostofa",
    typeof: function(){
        return `this person Name: ${person.name}`
    }
}
console.log("Check prototyp",person.typeof())

const student = {
    name: "nadim mostofa",
    age: 21
}
console.log(student.toString())